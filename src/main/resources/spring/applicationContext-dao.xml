<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--指明数据库的配置文件所在的位置-->
    <context:property-placeholder location="classpath*:jdbc.properties"/>

    <!--配置数据库连接池Druid-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--配置数据库连接属性-->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--配置初始化大小，以及最小，最大线程数-->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!--获取连接等待时间的配置-->
        <property name="maxWait" value="60000"/>

        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，时间单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!--配置一个连接在连接池中生存的最小时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!--配置监控统计拦截的filter-->
        <property name="filters" value="stat"/>

    </bean>


    <!--spring 和 mybatis的整合，完成-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"/>

        <!--配置Mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>

    </bean>

    <!--
	MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
	自动创建到spring容器中，bean的id是mapper的类名（首字母小写）
	 -->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置扫描包的路径
		如果要扫描多个包，中间使用半角逗号分隔
		要求mapper.xml和mapper.java同名且在同一个目录
		 -->
        <!--配置包的路径-->
        <property name="basePackage" value="cn.com.taiji.mapper,cn.com.taiji.mapper.authority"/>
        <!--配置sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

    </bean>


    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"/>

    </bean>

    <!--配置通知-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="view*" read-only="true" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" propagation="REQUIRED" /><!-- 防止漏网之鱼 -->
        </tx:attributes>
    </tx:advice>

    <!--配置切面-->
    <aop:config>
        <!--配置切点-->
        <aop:pointcut id="transactionPointCut" expression="execution(* cn.com.taiji.service.*.*(..))" />
        <!--对切点进行事务控制-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointCut"/>
    </aop:config>
</beans>


